class RinomMathXE{static precisionEquals(number,compareTo,roundWith=1.0,shouldRound=false,precPad=0.0){if(number==compareTo){return true;}else if(shouldRound){if(Math.round(number*roundWith)/roundWith==Math.round(compareTo*roundWith)/roundWith){return true;}else if(Math.round(number*roundWith)/roundWith==compareTo){return true;}}if(precPad!=0.0){return(compareTo>=number-precPad&&compareTo<=number+precPad)||(number>=compareTo-precPad&&number<=compareTo+precPad);}return false;}static to2dPoint(point,viewPoint,viewAtPoint,xyz,numbers,roundWith=1.0,shouldRound=false,precPad=0.0,index=0){if(Math.abs(numbers[2])>Math.abs(point[xyz[2]]-viewPoint[xyz[2]])){return null;}else if((numbers[2]>=-0.0)!=(point[xyz[2]]-viewPoint[xyz[2]]>=-0.0)){return null;}index=point.length-1;while((index==xyz[0]||index==xyz[1]||index==xyz[2])&&index!=-1){index-=1}while(index!=-1){if(!RinomMathXE.precisionEquals(viewPoint[index]+(point[index]-viewPoint[index])*numbers[2]/(point[xyz[2]]-viewPoint[xyz[2]]),viewAtPoint[index],roundWith,shouldRound,precPad)){return null;}index-=1;while((index==xyz[0]||index==xyz[1]||index==xyz[2])&&index!=-1){index-=1}}return[numbers[0]+(point[xyz[0]]-viewPoint[xyz[0]])*numbers[2]/(point[xyz[2]]-viewPoint[xyz[2]]),numbers[1]+(point[xyz[1]]-viewPoint[xyz[1]])*numbers[2]/(point[xyz[2]]-viewPoint[xyz[2]])];}static compare(zd,zd1){if(zd[0]<zd1[0]){return true;}else if(zd[0]>zd1[0]){return false;}return zd[1]<=zd1[1];}static shapeDistance(viewPoint,points,points2d,indices,z,indexer=[,].fill(0),numbers=[,].fill(0.0)){if(indices.length==0){return[-2.0,-1.0];}indexer[0]=indices.length-1;numbers[0]=0.0;numbers[1]=0.0;while(indexer[0]!=-1){if(points2d[indices[indexer[0]]]==null){return[-1.0,-1.0];}numbers[0]+=points[indices[indexer[0]]][z]-viewPoint[z];numbers[1]+=Math.sqrt(points2d[indices[indexer[0]]][0]*points2d[indices[indexer[0]]][0]+points2d[indices[indexer[0]]][1]*points2d[indices[indexer[0]]][1]);indexer[0]-=1}return[Math.abs(numbers[0])/indices.length,numbers[1]/indices.length];}}class RinomDrawXE{points;points2d;shapes;drawOrder;shapeIndex;pointIndex;xyz;viewPoint;viewAtPoint;dists;index;funcIndex;indices;indices1;numbers;constructor(viewPoint,viewAtDimens,x=0,y=1,z=2,pointCapacity=0,shapeCapacity=0){this.viewPoint=viewPoint;this.viewAtPoint=viewAtDimens;this.xyz=[x,y,z];this.drawOrder=[shapeCapacity].fill(0);this.points=[pointCapacity];this.points2d=[pointCapacity];this.shapes=[shapeCapacity];this.shapeIndex=0;this.pointIndex=0;}reset(){this.pointIndex=0;this.shapeIndex=0;}addPoint(point){if(this.points.length==this.pointIndex){this.points.push(point)}else{this.points[this.pointIndex]=point}this.pointIndex+=1;}addShape(shape){if(this.shapes.length==this.shapeIndex){this.shapes.push(shape)}else{this.shapes[this.shapeIndex]=shape}this.shapeIndex+=1;}set2dPoints(roundWith=1.0,shouldRound=false,precPad=0.0){if(this.pointIndex>this.points2d.length){this.points2d=[this.pointIndex]}this.index=this.pointIndex-1;this.funcIndex=0;this.numbers=[this.viewPoint[this.xyz[0]]-this.viewAtPoint[this.xyz[0]],this.viewPoint[this.xyz[1]]-this.viewAtPoint[this.xyz[1]],this.viewAtPoint[this.xyz[2]]-this.viewPoint[this.xyz[2]]];while(this.index!=-1){this.points2d[this.index]=RinomMathXE.to2dPoint(this.points[this.index],this.viewPoint,this.viewAtPoint,this.xyz,this.numbers,roundWith,shouldRound,precPad,this.funcIndex);this.index-=1}}offset(offsets=[0.0,0.0]){this.index=this.pointIndex-1;while(this.index!=-1){if(this.points2d[this.index]!=null){this.points2d[this.index][0]+=offsets[0];this.points2d[this.index][1]+=offsets[1]}this.index-=1}}reverseX(){this.index=this.pointIndex-1;while(this.index!=-1){if(this.points2d[this.index]!=null){this.points2d[this.index][0]= -this.points2d[this.index][0]}this.index-=1}}reverseY(){this.index=this.pointIndex-1;while(this.index!=-1){if(this.points2d[this.index]!=null){this.points2d[this.index][1]= -this.points2d[this.index][1]}this.index-=1}}setDrawOrder(){if(this.shapeIndex<2){return;}if(this.drawOrder.length<this.shapeIndex){this.drawOrder=[this.shapeIndex].fill(-1)}if(this.dists==undefined){this.dists=[this.shapeIndex].fill([-3.0,-3.0])}else if(this.dists.length<this.shapeIndex){this.dists=[this.shapeIndex].fill([-3.0,-3.0])}if(this.numbers==undefined){this.numbers=[,].fill(0.0)}if(this.indices1==undefined){this.indices1=[,].fill(0)}this.indices=[this.shapeIndex-1,0,0,2];this.dists[this.indices[0]]=RinomMathXE.shapeDistance(this.viewPoint,this.points,this.points2d,this.shapes[this.indices[0]],this.xyz[2],this.indices1,this.numbers);this.dists[this.indices[0]-1]=RinomMathXE.shapeDistance(this.viewPoint,this.points,this.points2d,this.shapes[this.indices[0]-1],this.xyz[2],this.indices1,this.numbers);if(RinomMathXE.compare(this.dists[this.indices[0]],this.dists[this.indices[0]-1])){this.drawOrder[0]=this.indices[0];this.drawOrder[1]=this.indices[0]-1}else{this.drawOrder[0]=this.indices[0]-1;this.drawOrder[1]=this.indices[0]}this.indices[0]-=2;while(this.indices[0]!=-1){this.dists[this.indices[0]]=RinomMathXE.shapeDistance(this.viewPoint,this.points,this.points2d,this.shapes[this.indices[0]],this.xyz[2],this.indices1,this.numbers);this.indices[1]=0;this.indices[2]=this.indices[3]-1;while(this.indices[1]!=this.indices[2]){if(RinomMathXE.compare(this.dists[this.indices[0]],this.dists[this.drawOrder[Math.round((this.indices[1]+this.indices[2])/2.0)]])){if(this.indices[1]+1==this.indices[2]){this.indices[2]=this.indices[1]}else{this.indices[2]=Math.ceil((this.indices[1]+this.indices[2])/2.0)}}else{if(this.indices[1]+1==this.indices[2]){this.indices[1]=this.indices[2]}else{this.indices[1]=Math.floor((this.indices[1]+this.indices[2])/2.0)}}}if(RinomMathXE.compare(this.dists[this.indices[0]],this.dists[this.drawOrder[this.indices[1]]])){this.indices[2]=this.indices[1]}else{this.indices[2]=this.indices[1]+1}this.indices[1]=this.indices[3];while(this.indices[1]!=this.indices[2]){this.drawOrder[this.indices[1]]=this.drawOrder[this.indices[1]-1];this.indices[1]-=1}this.drawOrder[this.indices[2]]=this.indices[0];this.indices[0]-=1;this.indices[3]+=1}}}//X E
